
const { ethers } = require("hardhat");

async function main() {
  console.log("üöÄ D√©ploiement du contrat HimpactPoints sur Celo...");
  
  // R√©cup√©rer le d√©ployeur
  const [deployer] = await ethers.getSigners();
  console.log("üìù D√©ployeur:", deployer.address);
  
  // V√©rifier le solde
  const balance = await deployer.getBalance();
  console.log("üí∞ Solde du d√©ployeur:", ethers.utils.formatEther(balance), "CELO");
  
  if (balance.lt(ethers.utils.parseEther("0.1"))) {
    console.warn("‚ö†Ô∏è  Attention: Solde faible pour le d√©ploiement");
  }
  
  // D√©ployer le contrat
  const HimpactPoints = await ethers.getContractFactory("HimpactPoints");
  const himpactPoints = await HimpactPoints.deploy();
  
  await himpactPoints.deployed();
  
  console.log("‚úÖ Contrat HimpactPoints d√©ploy√© √† l'adresse:", himpactPoints.address);
  console.log("üîó Hash de transaction:", himpactPoints.deployTransaction.hash);
  
  // Attendre quelques confirmations avant la v√©rification
  console.log("‚è≥ Attente de 5 confirmations...");
  await himpactPoints.deployTransaction.wait(5);
  
  console.log("üìã Informations de d√©ploiement:");
  console.log("   - Contrat:", himpactPoints.address);
  console.log("   - Owner:", await himpactPoints.owner());
  console.log("   - Network:", (await ethers.provider.getNetwork()).name);
  
  // Sauvegarder l'adresse pour usage ult√©rieur
  console.log("\nüîê Sauvegardez cette adresse de contrat:");
  console.log(himpactPoints.address);
  
  return himpactPoints.address;
}

main()
  .then((address) => {
    console.log(`\n‚ú® D√©ploiement termin√© avec succ√®s!`);
    console.log(`üìù Adresse du contrat: ${address}`);
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Erreur lors du d√©ploiement:", error);
    process.exit(1);
  });
