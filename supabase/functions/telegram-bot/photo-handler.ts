
import { TelegramAPI } from './telegram-api.ts'
import type { TelegramUpdate } from './types.ts'

export class PhotoHandler {
  private telegramAPI: TelegramAPI
  private supabaseClient: any

  constructor(telegramAPI: TelegramAPI, supabaseClient: any) {
    this.telegramAPI = telegramAPI
    this.supabaseClient = supabaseClient
  }

  async handlePhoto(chatId: number, telegramId: string, photos: any[], telegramUsername?: string, firstName?: string) {
    console.log('üì∏ Processing photo message - Photo array:', photos)
    console.log('üë§ User info received:', { telegramId, telegramUsername, firstName })

    try {
      // Pr√©parer les donn√©es utilisateur avec le bon nom d'utilisateur
      const actualTelegramUsername = telegramUsername || null;
      const pseudoToUse = actualTelegramUsername ? actualTelegramUsername : (firstName || `User ${telegramId.slice(-4)}`);
      
      console.log('üë§ User data to save:', {
        p_telegram_id: telegramId,
        p_telegram_username: actualTelegramUsername,
        p_pseudo: pseudoToUse
      });

      // V√©rifier ou cr√©er l'utilisateur avec les bonnes donn√©es
      const { data: user, error: userError } = await this.supabaseClient.rpc('create_user_if_not_exists', {
        p_telegram_id: telegramId,
        p_telegram_username: actualTelegramUsername,
        p_pseudo: pseudoToUse
      })

      if (userError) {
        console.error('‚ùå Error creating/updating user:', userError)
        await this.telegramAPI.sendMessage(chatId, '‚ùå Erreur lors de la cr√©ation du profil utilisateur.')
        return { success: false, error: userError }
      }

      console.log('‚úÖ User created/updated successfully:', user)

      // S√©lectionner la meilleure photo (plus grande taille)
      const bestPhoto = photos.reduce((prev, current) => 
        (current.file_size || current.width * current.height) > (prev.file_size || prev.width * prev.height) ? current : prev
      )

      console.log('üì∏ Best photo selected:', {
        file_id: bestPhoto.file_id,
        width: bestPhoto.width,
        height: bestPhoto.height,
        file_size: bestPhoto.file_size
      })

      // T√©l√©charger la photo depuis Telegram et l'uploader vers Supabase
      const photoUrl = await this.telegramAPI.getFileUrl(bestPhoto.file_id)
      if (!photoUrl) {
        console.error('‚ùå Failed to get photo URL from Telegram')
        await this.telegramAPI.sendMessage(chatId, '‚ùå Erreur lors du t√©l√©chargement de la photo.')
        return { success: false, error: 'Failed to get photo URL' }
      }

      console.log('üì∏ Photo URL from Telegram:', photoUrl)

      // T√©l√©charger la photo
      const photoResponse = await fetch(photoUrl)
      if (!photoResponse.ok) {
        console.error('‚ùå Failed to download photo from Telegram')
        await this.telegramAPI.sendMessage(chatId, '‚ùå Erreur lors du t√©l√©chargement de la photo.')
        return { success: false, error: 'Failed to download photo' }
      }

      const photoBlob = await photoResponse.blob()
      const photoArrayBuffer = await photoBlob.arrayBuffer()
      const photoUint8Array = new Uint8Array(photoArrayBuffer)

      // G√©n√©rer un nom de fichier unique
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `${telegramId}-${timestamp}-${bestPhoto.file_id}.jpg`
      const filePath = `reports/${fileName}`

      console.log('üì§ Uploading photo to Supabase Storage:', filePath)

      // Uploader vers Supabase Storage
      const { data: uploadData, error: uploadError } = await this.supabaseClient.storage
        .from('report-photos')
        .upload(filePath, photoUint8Array, {
          contentType: 'image/jpeg',
          cacheControl: '3600',
          upsert: false
        })

      if (uploadError) {
        console.error('‚ùå Error uploading photo to Supabase:', uploadError)
        await this.telegramAPI.sendMessage(chatId, '‚ùå Erreur lors de la sauvegarde de la photo.')
        return { success: false, error: uploadError }
      }

      console.log('‚úÖ Photo uploaded successfully:', uploadData)

      // Obtenir l'URL publique de la photo upload√©e
      const { data: publicUrlData } = this.supabaseClient.storage
        .from('report-photos')
        .getPublicUrl(filePath)

      const supabasePhotoUrl = publicUrlData.publicUrl
      console.log('üì∏ Supabase photo URL:', supabasePhotoUrl)

      // Sauvegarder dans pending_reports avec l'URL Supabase
      console.log('üíæ Calling upsert_pending_report with Supabase URL:', {
        p_telegram_id: telegramId,
        p_photo_url: supabasePhotoUrl
      })

      const { data: pendingReport, error: pendingError } = await this.supabaseClient.rpc('upsert_pending_report_with_url', {
        p_telegram_id: telegramId,
        p_photo_url: supabasePhotoUrl
      })

      console.log('üíæ Pending report upsert result:', {
        pendingReport,
        pendingError,
        errorMessage: pendingError?.message,
        errorDetails: pendingError?.details
      })

      if (pendingError) {
        console.error('‚ùå Error saving pending report:', pendingError)
        await this.telegramAPI.sendMessage(chatId, '‚ùå Erreur lors de la sauvegarde de la photo. R√©essayez.')
        return { success: false, error: pendingError }
      }

      // Message de succ√®s uniquement si tout s'est bien pass√©
      await this.telegramAPI.sendMessage(chatId, `üì∏ <b>Photo re√ßue et sauvegard√©e !</b>

Maintenant, partagez votre localisation pour finaliser le signalement.

üí° <i>Utilisez le bouton "üìç Partager la localisation" de Telegram</i>`)

      return { success: true }
    } catch (error) {
      console.error('‚ùå Photo processing error:', error)
      await this.telegramAPI.sendMessage(chatId, '‚ùå Erreur lors du traitement de la photo')
      return { success: false, error }
    }
  }
}
