export class AIConversationHandler {
  private supabaseClient: any
  
  constructor(supabaseClient: any) {
    this.supabaseClient = supabaseClient
  }

  async handleAIConversation(userMessage: string, telegramId: string): Promise<string> {
    try {
      console.log('ü§ñ Starting AI conversation for user:', telegramId)
      console.log('üìù User message:', userMessage)

      // R√©cup√©rer le contexte utilisateur
      const userContext = await this.getUserContext(telegramId)
      
      // Construire le prompt syst√®me avec contexte
      const systemPrompt = this.buildSystemPrompt(userContext)
      
      // Pr√©parer la requ√™te √† OpenAI
      const openAIKey = Deno.env.get('OPENAI_API_KEY')
      if (!openAIKey) {
        return "ü§ñ D√©sol√©e, je ne peux pas vous r√©pondre pour le moment. Essayez une commande comme /aide."
      }

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userMessage }
          ],
          max_tokens: 500,
          temperature: 0.7,
        }),
      })

      if (!response.ok) {
        console.error('‚ùå OpenAI API error:', await response.text())
        return this.getFallbackResponse(userMessage)
      }

      const data = await response.json()
      const aiResponse = data.choices[0]?.message?.content

      if (!aiResponse) {
        return this.getFallbackResponse(userMessage)
      }

      console.log('ü§ñ AI response generated successfully')
      return aiResponse

    } catch (error) {
      console.error('‚ùå AI conversation error:', error)
      return this.getFallbackResponse(userMessage)
    }
  }

  private async getUserContext(telegramId: string): Promise<any> {
    try {
      const { data: user } = await this.supabaseClient.rpc('get_user_by_telegram_id', {
        p_telegram_id: telegramId
      })

      // R√©cup√©rer quelques signalements r√©cents de l'utilisateur
      const { data: recentReports } = await this.supabaseClient
        .from('reports')
        .select('status, waste_type, created_at')
        .eq('user_id', user?.id)
        .order('created_at', { ascending: false })
        .limit(3)

      return {
        user,
        recentReports: recentReports || []
      }
    } catch (error) {
      console.error('‚ùå Error getting user context:', error)
      return { user: null, recentReports: [] }
    }
  }

  private buildSystemPrompt(context: any): string {
    const { user, recentReports } = context
    
    let systemPrompt = `Tu es D√©bora, l'assistante IA de La Ligne Verte, une plateforme citoyenne de signalement de probl√®mes environnementaux.

PERSONNALIT√â :
- Amicale et encourageante
- Passionn√©e d'environnement
- Utilise des emojis pertinents
- R√©ponds en fran√ßais
- Reste concise (max 3 paragraphes)

FONCTIONNALIT√âS DE LA PLATEFORME :
- Signalement par photo + localisation
- Syst√®me de points Himpact (10 points par signalement, +50 si valid√©)
- Carte collaborative des signalements
- Classement des contributeurs
- D√©tection automatique des d√©chets par IA

COMMANDES DISPONIBLES :
/start - Inscription
/points - Voir ses points
/carte - Lien vers la carte
/aide - Aide compl√®te
/changenom - Modifier pseudo
/compte - Cr√©er compte web

INSTRUCTIONS :
- Aide sur les signalements (comment photographier, quoi signaler)
- Encourage les bonnes pratiques environnementales
- Explique le syst√®me de points
- Guide vers les commandes appropri√©es
- R√©ponds aux questions sur l'√©cologie urbaine`

    if (user) {
      systemPrompt += `

CONTEXTE UTILISATEUR :
- Pseudo: ${user.pseudo}
- Points Himpact: ${user.points_himpact}
- Niveau: ${user.level_current || 1}
- Signalements: ${user.reports_count || 0}`

      if (recentReports.length > 0) {
        systemPrompt += `
- Derniers signalements: ${recentReports.map(r => `${r.waste_type || 'inconnu'} (${r.status})`).join(', ')}`
      }
    }

    return systemPrompt
  }

  private getFallbackResponse(userMessage: string): string {
    const lowerMessage = userMessage.toLowerCase()
    
    if (lowerMessage.includes('point') || lowerMessage.includes('score')) {
      return "üèÜ Pour voir vos points, tapez /points\n\nVous gagnez 10 points par signalement et 50 points bonus si valid√© !"
    }
    
    if (lowerMessage.includes('carte') || lowerMessage.includes('map')) {
      return "üó∫Ô∏è Pour voir la carte des signalements, tapez /carte\n\nVous y trouverez tous les probl√®mes signal√©s par la communaut√© !"
    }
    
    if (lowerMessage.includes('aide') || lowerMessage.includes('help')) {
      return "‚ùì Pour obtenir de l'aide compl√®te, tapez /aide\n\nJe peux vous expliquer comment signaler un probl√®me !"
    }
    
    if (lowerMessage.includes('signaler') || lowerMessage.includes('photo')) {
      return "üì∏ Pour signaler un probl√®me :\n1. Prenez une photo claire\n2. Partagez votre localisation\n3. C'est tout ! Vous gagnez des points üèÜ"
    }
    
    return "ü§ñ Je suis D√©bora, votre assistante ! Tapez /aide pour voir tout ce que je peux faire pour vous aider avec vos signalements environnementaux ! üå±"
  }

  isAIConversationMessage(message: string): boolean {
    // Messages qui d√©clenchent une conversation IA
    const aiTriggers = [
      'd√©bora', 'bonjour', 'salut', 'hello', 'bonsoir',
      'comment', 'pourquoi', 'que faire', 'aide-moi',
      'explique', 'conseille', 'suggestion',
      'environnement', 'pollution', 'd√©chet', 'ordure',
      '√©cologie', 'vert', 'nature', 'plan√®te'
    ]
    
    const lowerMessage = message.toLowerCase()
    return aiTriggers.some(trigger => lowerMessage.includes(trigger))
  }
}